{"version":3,"sources":["features/Blog/BlogHeader/BlogHeader.js","features/Blog/slices/postsSlice.js","features/Blog/BlogContent/PostItem/PostItem.js","features/Blog/BlogContent/PostsList.js","features/Blog/BlogContent/BlogContent.js","features/Blog/BlogFooter/PostForm.js","features/Blog/BlogFooter/BlogFooter.js","features/Blog/Blog.js","features/Blog/ModalSearch/ModalSearch.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["BlogHeader","props","className","onClick","openModal","postSlice","createSlice","name","initialState","postsArray","searchQuery","reducers","createPost","state","action","push","payload","deletePost","splice","setSearchQuery","actions","postsList","posts","PostItem","post","dispatch","useDispatch","post_title","src","image_url","alt","image_alt","nickname","post_date","post_time","post_tags","post_text","post_id","PostsList","query","useSelector","postsItems","filter","item","split","some","tag","toLowerCase","indexOf","map","key","BlogContent","length","PostForm","useState","title","setTitle","nick","setNickname","tags","setTags","text","setText","imageUrl","setImageUrl","getDate","nowDate","Date","day","month","getMonth","getFullYear","getTime","hours","getHours","minutes","getMinutes","onSubmit","e","preventDefault","postObject","htmlFor","type","id","value","placeholder","required","onChange","target","accept","reader","FileReader","file","files","onloadend","result","readAsDataURL","handleImageChange","BlogFooter","Blog","ModalSearch","onKeyPress","handleKeyPress","App","isOpen","setIsOpen","configureStore","reducer","postsReducer","Boolean","window","location","hostname","match","ReactDOM","render","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.58b786ec.chunk.js","sourcesContent":["import React from 'react';\r\nimport './BlogHeader.scss';\r\n\r\nfunction BlogHeader(props) {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"header__content\">\r\n                <div className=\"header__title\">\r\n                    <h1>Добро пожаловать на мой мини-блог!</h1>\r\n                </div>\r\n                <div className=\"header__search\">\r\n                    <button onClick={props.openModal}>Открыть поиск</button>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default BlogHeader;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const postSlice = createSlice({\r\n    name: 'posts',\r\n    initialState: {\r\n        postsArray: [],\r\n        searchQuery: \"\"\r\n    },\r\n    reducers: {\r\n        createPost: (state, action) => {\r\n            state.postsArray.push(action.payload);\r\n        },\r\n        deletePost: (state, action) => {\r\n            state.postsArray.splice(action.payload - 1, 1);\r\n        },\r\n        setSearchQuery: (state, action) => {\r\n            state.searchQuery = action.payload\r\n        }\r\n    }\r\n});\r\n\r\nexport const { createPost, deletePost, setSearchQuery } = postSlice.actions;\r\n\r\nexport const postsList = state => state.posts.postsArray;\r\nexport const searchQuery = state => state.posts.searchQuery;\r\n\r\nexport default postSlice.reducer;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { deletePost } from '../../slices/postsSlice';\r\nimport './PostItem.scss';\r\n\r\nfunction PostItem(props) {\r\n    const post = props.post;\r\n    const dispatch = useDispatch();\r\n\r\n    return (\r\n        <div className=\"post\">\r\n            <div className=\"post__title\">\r\n                <h2>{post.post_title}</h2>\r\n            </div>\r\n            <div className=\"post__image\">\r\n                <img src={post.image_url} alt={post.image_alt}></img>\r\n            </div>\r\n            <div className=\"post__info\">\r\n                <div className=\"author\">\r\n                    <span>Автор: <b>{post.nickname}</b></span>\r\n                </div>\r\n                <div className=\"date\">\r\n                    <span>Дата: {post.post_date} {post.post_time}</span>\r\n                </div>\r\n                <div className=\"tags\">\r\n                    <span>Теги: {post.post_tags}</span>\r\n                </div>\r\n            </div>\r\n            <div className=\"post__text\">\r\n                <span>{post.post_text}</span>\r\n            </div>\r\n            <div className=\"post__delete\">\r\n                <span onClick={() => dispatch(deletePost(post.post_id))}>Удалить пост</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostItem;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport PostItem from './PostItem/PostItem';\r\nimport { searchQuery } from '../slices/postsSlice';\r\n\r\nfunction PostsList(props) {\r\n    const query = useSelector(searchQuery);\r\n\r\n    const postsItems = props.posts.filter(item => {\r\n        if(query !== \"\") {\r\n            const tags = item.post_tags.split(\",\");\r\n\r\n            return tags.some(tag => tag.toLowerCase().indexOf(query.toLowerCase()) !== -1);\r\n        }\r\n\r\n        return true;\r\n    }).map((item) => \r\n        <PostItem post={item} key={item.post_id} />\r\n    )\r\n\r\n    return (\r\n        <>\r\n            {postsItems}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PostsList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { postsList } from '../slices/postsSlice';\r\nimport './BlogContent.scss';\r\nimport PostsList from './PostsList';\r\n\r\nfunction BlogContent() {\r\n    const posts = useSelector(postsList);\r\n\r\n    if(posts.length === 0) {\r\n        return (\r\n            <section className=\"blog-content\">\r\n                <div className=\"blog-content__description\">\r\n                    <span>В данный момент никаких записей не существует!</span>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <section className=\"blog-content\">\r\n                <div className=\"blog-content__posts\">\r\n                    <PostsList posts={posts} />\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n\r\nexport default BlogContent;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { createPost, postsList } from '../slices/postsSlice';\r\n\r\nfunction PostForm() {\r\n    const [title, setTitle] = useState(\"\");\r\n    const [nick, setNickname] = useState(\"\");\r\n    const [tags, setTags] = useState(\"\");\r\n    const [text, setText] = useState(\"\");\r\n    const [imageUrl, setImageUrl] = useState(\"\");\r\n    const posts = useSelector(postsList);\r\n    const dispatch = useDispatch();\r\n\r\n    const getDate = () => {\r\n        let nowDate = new Date();\r\n\r\n        let day = nowDate.getDate();\r\n        let month = nowDate.getMonth() + 1;\r\n        let year = nowDate.getFullYear();\r\n\r\n        if (day < 10) {\r\n            day = \"0\" + day;\r\n        }\r\n        if (month < 10) {\r\n            month = \"0\" + month;\r\n        }\r\n\r\n        const result = day + \".\" + month + \".\" + year;\r\n\r\n        return result;\r\n    };\r\n\r\n    const getTime = () => {\r\n        let nowDate = new Date();\r\n\r\n        let hours = nowDate.getHours();\r\n        let minutes = nowDate.getMinutes();\r\n\r\n        if (hours < 10) {\r\n            hours = \"0\" + hours;\r\n        }\r\n        if (minutes < 10) {\r\n            minutes = \"0\" + minutes;\r\n        }\r\n\r\n        const result = hours + \":\" + minutes;\r\n\r\n        return result;\r\n    }\r\n\r\n    const handleImageChange = e => {\r\n        e.preventDefault();\r\n\r\n        let reader = new FileReader();\r\n        let file = e.target.files[0];\r\n\r\n        reader.onloadend = () => setImageUrl(reader.result);\r\n\r\n        if (file) reader.readAsDataURL(file);\r\n    }\r\n\r\n    const handleSubmitForm = e => {\r\n        e.preventDefault();\r\n\r\n        let lastId = posts.length + 1;\r\n\r\n        const postObject = {\r\n            post_id: lastId,\r\n            post_title: title,\r\n            image_url: imageUrl,\r\n            image_alt: title,\r\n            nickname: nick,\r\n            post_date: getDate(),\r\n            post_time: getTime(),\r\n            post_tags: tags,\r\n            post_text: text\r\n        };\r\n\r\n        dispatch(createPost(postObject));\r\n\r\n        setTitle(\"\");\r\n        setNickname(\"\");\r\n        setText(\"\");\r\n        setTags(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"blog-footer__form\" onSubmit={handleSubmitForm}>\r\n            <fieldset>\r\n                <legend>Добавить пост</legend>\r\n                <label htmlFor=\"title\">Название поста:</label>\r\n                <input type=\"text\" id=\"title\" value={title} placeholder=\"Введите название поста...\" required\r\n                    onChange={(e) => setTitle(e.target.value)}></input>\r\n                <label htmlFor=\"nickname\">Ваш ник:</label>\r\n                <input type=\"text\" id=\"nickname\" value={nick} placeholder=\"Введите свой ник...\" required\r\n                    onChange={(e) => setNickname(e.target.value)}></input>\r\n                <label htmlFor=\"text\">Текст поста:</label>\r\n                <textarea id=\"text\" value={text} placeholder=\"Напишите то, о чём хотите рассказать...\" required\r\n                    onChange={(e) => setText(e.target.value)}></textarea>\r\n                <label htmlFor=\"file\">Выберите изображение: </label><br/><br/>\r\n                <input type=\"file\" id=\"file\" accept=\"image/jpeg, image/png\" required \r\n                    onChange={(e) => handleImageChange(e)}></input><br/><br/>\r\n                <label htmlFor=\"tags\">Введите теги:</label>\r\n                <input type=\"text\" id=\"tags\" value={tags} placeholder=\"Введите теги через запятую...\" required\r\n                    onChange={(e) => setTags(e.target.value)}></input>\r\n                <button type=\"submit\">Добавить пост</button>\r\n            </fieldset>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PostForm;\r\n","import React from 'react';\r\nimport './BlogFooter.scss';\r\nimport PostForm from './PostForm';\r\n\r\nfunction BlogFooter() {\r\n    return (\r\n        <div className=\"blog-footer\">\r\n            <PostForm />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlogFooter;\r\n","import React from 'react';\r\nimport './Blog.scss';\r\nimport BlogHeader from './BlogHeader/BlogHeader';\r\nimport BlogContent from './BlogContent/BlogContent';\r\nimport BlogFooter from './BlogFooter/BlogFooter';\r\n\r\nfunction Blog(props) {\r\n    return (\r\n        <div className=\"Blog\">\r\n            <div className=\"container\">\r\n                <BlogHeader openModal={props.openModal} />\r\n                <BlogContent />\r\n                <BlogFooter />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Blog;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setSearchQuery } from '../slices/postsSlice';\r\nimport './ModalSearch.scss';\r\n\r\nfunction ModalSearch(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleKeyPress = e => {\r\n        if (e.key === 'Enter') {\r\n            dispatch(setSearchQuery(e.target.value));\r\n            props.openModal();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"modal__outer\" onClick={props.openModal}></div>\r\n            <div className=\"modal__inner\">\r\n                <div className=\"modal__content\">\r\n                    <label htmlFor=\"search\">Поиск по тегам:</label><br /><br />\r\n                    <input type=\"text\" id=\"search\" placeholder=\"Введите поисковый запрос...\"\r\n                        onKeyPress={e => handleKeyPress(e)}></input>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModalSearch;\r\n","import React, { useState } from 'react';\r\nimport Blog from './features/Blog/Blog';\r\nimport ModalSearch from './features/Blog/ModalSearch/ModalSearch';\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const openModal = () => {\r\n    isOpen ? setIsOpen(false) : setIsOpen(true);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Blog openModal={openModal} />\r\n      {isOpen === true &&\r\n        <ModalSearch openModal={openModal} />\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport postsReducer from '../features/Blog/slices/postsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}